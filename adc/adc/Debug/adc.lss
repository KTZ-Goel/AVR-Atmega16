
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ce  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000162  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000107  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c7  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000103  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000b5  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000003d  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <adcinit>:
#include <util/delay.h>
uint8_t data=0,data1;

void adcinit()
{
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 66       	ori	r24, 0x60	; 96
  80:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 68       	ori	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
  88:	08 95       	ret

0000008a <adcstart>:
}

void adcstart(uint8_t channel)
{
	channel &=0b00000111;
	ADMUX|=(channel);
  8a:	97 b1       	in	r25, 0x07	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
}

void adcstart(uint8_t channel)
{
	channel &=0b00000111;
  8c:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=(channel);
  8e:	98 2b       	or	r25, r24
  90:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA|=(1<<ADSC);                 //start conversion signal given... ADSC bit is reset once conversion is done
  92:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));       //this stalls the program till conversion is complete....called polling
  94:	36 99       	sbic	0x06, 6	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <adcstart+0xa>
	
	data=ADCL;
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 93 60 00 	sts	0x0060, r24
	data1=ADCH;
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	80 93 61 00 	sts	0x0061, r24
  a4:	08 95       	ret

000000a6 <main>:
	TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);
	
	ICR1=255;
	*/
	
	DDRD=0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17
	PORTD=0x01;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	82 bb       	out	0x12, r24	; 18
	adcinit();
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <adcinit>
		
         adcstart(0b00000000);             //running conversion on channel 1
		 if(data1 > 120)
			PORTD=0x00;
		else
		PORTD=0x01;
  b2:	c1 e0       	ldi	r28, 0x01	; 1
	adcinit();
	//TCNT1=0;
   while(1)
    {
		
         adcstart(0b00000000);             //running conversion on channel 1
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 45 00 	call	0x8a	; 0x8a <adcstart>
		 if(data1 > 120)
  ba:	80 91 61 00 	lds	r24, 0x0061
  be:	89 37       	cpi	r24, 0x79	; 121
  c0:	10 f0       	brcs	.+4      	; 0xc6 <main+0x20>
			PORTD=0x00;
  c2:	12 ba       	out	0x12, r1	; 18
  c4:	f7 cf       	rjmp	.-18     	; 0xb4 <main+0xe>
		else
		PORTD=0x01;
  c6:	c2 bb       	out	0x12, r28	; 18
  c8:	f5 cf       	rjmp	.-22     	; 0xb4 <main+0xe>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
